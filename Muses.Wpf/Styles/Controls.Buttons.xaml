<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Muses.Wpf.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Muses.Wpf;component/Resources/Assets.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Standard flat button -->
    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlColorBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColorBrush}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ActualWidth}"/>
                                <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ActualHeight}"/>
                                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" />
                                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                                <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" />
                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                            </Style>
                        </Border.Style>
                        <Grid Background="Transparent">
                            <ContentPresenter x:Name="Content" HorizontalAlignment="Center" VerticalAlignment="Center"></ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHoveredColorBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundPressedColorBrush}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentDarkColorBrush}"  />
                        </Trigger>
                        <Trigger Property="IsDefault" Value="True">
                            <Setter Property="FontWeight" Value="Bold" />
                            <Setter TargetName="Border"  Property="BorderThickness" Value="2" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border"  Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledColorBrush}"/>
                            <Setter TargetName="Border"  Property="Background" Value="{DynamicResource DisabledBackColorBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Toggle flat button -->
    <Style x:Key="{x:Type ToggleButton}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlColorBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColorBrush}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ActualWidth}"/>
                                <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ActualHeight}"/>
                                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" />
                                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                                <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" />
                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                            </Style>
                        </Border.Style>
                        <Grid Background="Transparent">
                            <ContentPresenter x:Name="Content" HorizontalAlignment="Center" VerticalAlignment="Center"></ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHoveredColorBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundPressedColorBrush}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentDarkColorBrush}"  />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundPressedColorBrush}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentDarkColorBrush}"  />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border"  Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledColorBrush}"/>
                            <Setter TargetName="Border"  Property="Background" Value="{DynamicResource DisabledBackColorBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Flat Checkbox -->
    <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}"/>
        <Setter Property="Background" Value="{DynamicResource ControlColorBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent" VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"  
                                      Width="18" 
                                      Height="18" 
                                      CornerRadius="0" 
                                      BorderBrush="{DynamicResource BorderColorBrush}"
                                      BorderThickness="1">
                                <Path Width="12" 
                                      Height="11"
                                      x:Name="CheckMark"
                                    Stroke="Transparent"
                                    Fill="{DynamicResource AccentColorBrush}"
                                      Stretch="Fill"
                                    StrokeThickness="1"
                                  Data="{StaticResource Muses.Wpf.Assets.CheckMark}"
                                   />
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter x:Name="Content" Margin="8,0,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border"  Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 0 L 0 8 L 8 8 L 8 0" />
                            <Setter TargetName="CheckMark" Property="Width" Value="10" />
                            <Setter TargetName="CheckMark" Property="Height" Value="10" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHoveredColorBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"  />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource InactiveColorBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource InactiveColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Flat Radiobutton -->
    <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}"/>
        <Setter Property="Background" Value="{DynamicResource ControlColorBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <BulletDecorator Background="Transparent" VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"  
                                      Width="18" 
                                      Height="18" 
                                      CornerRadius="9" 
                                      BorderBrush="{DynamicResource BorderColorBrush}"
                                      BorderThickness="1">
                                <Ellipse Width="10" 
                                      Height="10"
                                      x:Name="CheckMark"
                                    Stroke="Transparent"
                                    Fill="{DynamicResource AccentColorBrush}"
                                   />
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter x:Name="Content" Margin="8,0,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border"  Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHoveredColorBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"  />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource InactiveColorBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource InactiveColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Border" Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          Margin="{TemplateBinding Padding}"
                          RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- Mouse hovered. -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource AccentLightColorBrush}"/>
                        </Trigger>
                        
                        <!-- Mouse pressed. -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource AccentDarkColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundPressedColorBrush}" />
                        </DataTrigger>
                        
                        <!-- Inactive window, mouse hovered not pressed. -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=IsActive}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource InactiveColorLightBrush}"  />
                        </MultiDataTrigger>
                        
                        <!-- Active window with filled title bar, mouse hovered not pressed. -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:BaseWindow}}, Path=FillTitleBar}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:BaseWindow}}, Path=IsActive}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ControlHoveredColorBrush}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>