<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i = "http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:p="clr-namespace:Muses.Wpf.Properties"
                    xmlns:actions="clr-namespace:Muses.Wpf.Actions"
                    xmlns:controls="clr-namespace:Muses.Wpf.Controls">

    <Style x:Key="TabButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource AccentLightColorBrush}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Path=IsPressed}" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource AccentDarkColorBrush}"  />
                                    </DataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=IsActive}" Value="False"/>
                                            <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:CloseableTabItem}}, Path=IsSelected}" Value="True" />
                                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource InactiveColorLightBrush}"  />
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <Grid Background="Transparent">
                            <ContentPresenter></ContentPresenter>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Name="CloseableTabItemStyle" TargetType="controls:CloseableTabItem">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CloseableTabItem">
                    <Border Name="Border" SnapsToDevicePixels="True">
                        <DockPanel>
                            <ContentPresenter x:Name="ContentSite"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                DockPanel.Dock="Left"
                                ContentSource="Header"
                                Width="Auto"
                                Margin="10,2"/>
                            <Button x:Name="Close" 
                                TextElement.Foreground="{DynamicResource AccentForegroundColorBrush}"
                                ToolTip="{x:Static p:Resources.Tip_Close}"
                                BorderThickness="0"
                                Background="Transparent"
                                Margin="2,2"
                                Focusable="False"
                                HorizontalAlignment="Right"
                                Visibility="Hidden"
                                Style="{StaticResource TabButtonStyle}" 
                                DockPanel.Dock="Right">
                                <controls:IconChromePack Kind="CloseButton"
                                                         x:Name="CloseTab" 
                                                         SnapsToDevicePixels="True" 
                                                         Width="8" 
                                                         Height="8" 
                                                         Margin="4"
                                                         HorizontalAlignment="Right" 
                                                         Stroke="{DynamicResource AccentForegroundColorBrush}"
                                                         StrokeThickness="2" />
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <actions:CloseTabAction CloseableTabControl="{Binding RelativeSource={RelativeSource AncestorType=controls:CloseableTabControl}}" CloseableTabItem="{Binding RelativeSource={RelativeSource AncestorType=controls:CloseableTabItem}}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Button>
                        </DockPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- 
                        When the tab item is not close able then we collapse the button
                        so that it does not take up any room.
                        -->
                        <Trigger Property="IsCloseable" Value="False">
                            <Setter TargetName="Close" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        
                        <!--
                        Setup the correct colors when the tab item is selected or not.
                        -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentColorBrush}" />
                            <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource AccentForegroundColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BackgroundColorBrush}"  />
                            <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource ForegroundColorBrush}"/>
                        </Trigger>
                        
                        <!--
                        Change the background color of selected tab items when the parent window
                        is inactive.
                        -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=IsActive}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource InactiveColorBrush}"  />
                        </MultiDataTrigger>

                        <!--
                        Setup the background hover color of unselected tab items
                        -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" SourceName="Border" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentHoverColorBrush}" />
                            <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource AccentForegroundColorBrush}" />
                        </MultiTrigger>

                        <!--
                        Show the close button of tab items that are selected and close-able.
                        -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCloseable}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Close" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>

                        <!--
                        Show the close button of tab items that are hovered and close-able.
                        -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCloseable}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Close" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Name="CloseableTabControlStyle" TargetType="controls:CloseableTabControl">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="TabTransition" Value="{x:Static controls:TransitionType.None}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CloseableTabControl">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <StackPanel Grid.Row="0">
                            <!-- 
                                This will allow the TabItem header to be hosted in the first row of the
                                grid.
                            -->
                            <TabPanel IsItemsHost="True"/>
                        </StackPanel>

                        <Border Grid.Row="1"
                                BorderThickness="0,2,0,0"
                                Margin="0,-1,0,0"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True"
                                UseLayoutRounding="True">
                            <!--
                                The second row of the grid will host the content of the selected tab.
                            -->
                            <controls:TransitioningContentControl Content="{TemplateBinding SelectedContent}" 
                                                                  Transition="{TemplateBinding TabTransition}" />

                            <!--
                                This makes sure the control border will get the correct color for
                                an inactive window.
                            -->
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=IsActive}" Value="False">
                                            <Setter Property="BorderBrush" Value="{DynamicResource InactiveColorBrush}"  />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
</ResourceDictionary>