<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Muses.Wpf;component/Styles/Controls.ScrollBar.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- ScrollViewer for a MenuItem pop-up. -->
    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />

    <Style x:Key="MenuScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1"
                                Grid.Column="0">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}" />
                        </Border>

                        <RepeatButton Style="{StaticResource LineButtonStyle}"
                                      Height="14"
                                      Grid.Row="0"
                                      Grid.Column="0"
                                      Command="{x:Static ScrollBar.LineUpCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="False"
                                      Content="M 0 4 L 8 4 L 4 0 Z">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed"
                                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              ConverterParameter="0">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                        </RepeatButton>

                        <RepeatButton Style="{StaticResource LineButtonStyle}"
                                      Height="14"
                                      Grid.Row="2"
                                      Grid.Column="0"
                                      Command="{x:Static ScrollBar.LineDownCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="False"
                                      Content="M 0 0 L 4 4 L 8 0 Z">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed"
                                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              ConverterParameter="100">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MenuItem separator. -->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid Background="{DynamicResource Background2ColorBrush}">
                        <Rectangle Height="1" Stroke="{DynamicResource DisabledColorBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ContextMenu -->
    <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource Background2ColorBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColorBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border BorderThickness="0" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Margin="0,0,8,8">
                        <StackPanel IsItemsHost="True" 
                                    KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        <Border.Effect>
                            <DropShadowEffect Opacity=".4"/>
                        </Border.Effect>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Menu -->
    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource BackgroundColorBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColorBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border BorderThickness="0" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}">
                    <StackPanel ClipToBounds="True"
                                Orientation="Horizontal"
                                IsItemsHost="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- MenuItem -->
    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}"/>
        <Setter Property="Background" Value="{DynamicResource Background2ColorBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="Col0" 
                                                MinWidth="24" 
                                                Width="Auto" 
                                                SharedSizeGroup="MenuItemIconColumnGroup"/>
                            <ColumnDefinition Width="*" 
                                                SharedSizeGroup="MenuTextColumnGroup"/>
                            <ColumnDefinition Width="Auto" 
                                                SharedSizeGroup="MenuItemIGTColumnGroup"/>
                            <ColumnDefinition x:Name="Col3" 
                                                Width="14"/>
                        </Grid.ColumnDefinitions>

                        <!-- 
                        Simple border for a "TopLevelHeader" item when the pop-up
                        is shown. 
                        -->
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderThickness="1,1,1,0"
                                Grid.Row="0"
                                Grid.Column="0"
                                Grid.RowSpan="1"
                                Grid.ColumnSpan="4"/>
                        
                        <!-- ContentPresenter to show an Icon if needed -->
                        <ContentPresenter Grid.Column="0" 
                                            Margin="4,0,6,0" 
                                            x:Name="Icon" 
                                            VerticalAlignment="Center" 
                                            ContentSource="Icon"/>

                        <!-- Check mark for a checkable menu. -->
                        <Grid Grid.Column="0" 
                                Visibility="Hidden" 
                                Margin="4,0,6,0" 
                                x:Name="GlyphPanel" 
                                VerticalAlignment="Center">
                            <Path x:Name="GlyphPanelpath" 
                                    VerticalAlignment="Center" 
                                    Fill="{TemplateBinding Foreground}" 
                                    Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" 
                                    FlowDirection="LeftToRight"/>
                        </Grid>

                        <!-- Content for the menu label -->
                        <ContentPresenter Grid.Column="1"
                                        Margin="{TemplateBinding Padding}"
                                        x:Name="HeaderHost"
                                        RecognizesAccessKey="True"
                                        ContentSource="Header"/>

                        <!-- Content for the shortcuts -->
                        <ContentPresenter Grid.Column="2"
                                        Margin="8,1,8,1"
                                        x:Name="IGTHost"
                                        ContentSource="InputGestureText"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Center"/>

                        <!-- Sub-menu arrow. -->
                        <Grid Grid.Column="3" 
                                Margin="4,0,6,0" 
                                x:Name="ArrowPanel" 
                                VerticalAlignment="Center">
                            <Path x:Name="ArrowPanelPath" 
                                    HorizontalAlignment="Right" 
                                    VerticalAlignment="Center" 
                                    Fill="{TemplateBinding Foreground}" 
                                    Data="M0,0 L0,8 L4,4 z"/>
                        </Grid>

                        <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                                Placement="Right" 
                                x:Name="SubMenuPopup" 
                                Focusable="false" 
                                AllowsTransparency="True"
                                MinWidth="{Binding ActualWidth, ElementName=Border}"
                                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                            <Grid Margin="0,0,8,8">
                                <Border x:Name="SubMenuBorder"
                                        Background="{DynamicResource Background2ColorBrush}"
                                        BorderBrush="{DynamicResource BorderColorBrush}" 
                                        BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" 
                                        SnapsToDevicePixels="True"
                                        Padding="2,2,2,2">
                                    
                                    <!-- 
                                    The items are wrapped inside a ScrollViewer which will show appropriate
                                    scroll buttons when the menu height is clipped.
                                    
                                    https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/menu-styles-and-templates
                                    -->
                                    <ScrollViewer CanContentScroll="True"
                                                    Style="{StaticResource MenuScrollViewer}">
                                        <!-- The StackPanel holds the actual menu items. -->
                                        <StackPanel IsItemsHost="True" 
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </ScrollViewer>
                                    <Border.Effect>
                                        <DropShadowEffect Opacity=".4"/>
                                    </Border.Effect>
                                </Border>

                                <!-- 
                                This here border magic will create the "overlap" between the "TopLevelHeader" item of a
                                sub-menu. I.E. It will make it appear if the parent item is part of the pop-up. From the
                                work around suggested at:
                                
                                https://stackoverflow.com/questions/17083925/hide-or-remove-a-part-of-a-border-in-wpf
                                -->
                                <Border x:Name="TransitionBorder" 
                                        Width="0"
                                        Height="1" 
                                        VerticalAlignment="Top" 
                                        HorizontalAlignment="Left" 
                                        Background="Transparent" 
                                        SnapsToDevicePixels="True"
                                        BorderThickness="1,0,1,0" 
                                        BorderBrush="Transparent">
                                    <!-- This border will actually "erase" the part of the pop-up border. -->
                                    <Border BorderThickness="0,1,0,0"
                                            BorderBrush="{DynamicResource Background2ColorBrush}"/>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledColorBrush}"/>
                        </Trigger>
                        
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{DynamicResource ControlHoveredColorBrush}" TargetName="Border"/>
                        </Trigger>
                        
                        <!-- Role = TopLevelHeader : Default appearance -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Background" Value="{DynamicResource BackgroundColorBrush}"/>
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                            <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = TopLevelHeader : Sub menu open appearance -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role" Value="TopLevelHeader"/>
                                <Condition Property="IsSubmenuOpen" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" Value="{DynamicResource Background2ColorBrush}" TargetName="Border"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource BorderColorBrush}" TargetName="Border"/>
                                <Setter Property="BorderThickness" Value="1,1,1,0" TargetName="Border"/>
                                
                                <!-- Hide part of the popup top border. -->
                                <Setter Property="Width" Value="{Binding ActualWidth, ElementName=Border}" TargetName="TransitionBorder" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Background" Value="{DynamicResource BackgroundColorBrush}"/>
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>